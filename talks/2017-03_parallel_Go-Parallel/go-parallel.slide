Go Parallel

parallel 2017
29.03.2017

Jan Stamer
red6 enterprise software
@jsTamer21k
https://www.red6-es.de

* Go Parallel #Agenda
- Motivation
- Grundlagen
- Nebenläufigkeit

* Wer bin ich?

- Papa von 3 Kindern
- Java Entwickler und Architekt bei [[http://red6-es.de][red6]] in Hamburg
- Projekte für [[https://www.hansemerkur.de][HanseMerkur]] Versicherung

.background https://raw.githubusercontent.com/remast/talks/master/2017-03_parallel_Go-Parallel/images/gopher_jan_small.png

* Jan to Go #1

Angebote für Versicherungsvergleich:

- 4 Anfragen in 4 Sekunden
- 1 Anfrage in 4 Sekunden

_Fachbereich:_ "Wie schaffen wir 1 Anfrage in 1 Sekunde? Schnellerer Rechner? Mehr Speicher?"

_Entwicklung:_ "Nein hilft nicht. Vielleicht ein Index in der Datenbank ..."

* Jan to Go #2

Nebenläufige Programmierung in Java EE 6

  @Asynchronous
  public Future<BigDecimal> berechnePraemie(Antrag antrag) {
    // Teure Berechnung
  }

Fertig.

Ja asynchrone Servlets gibt es auch noch ...

* Jan to Go #3

Software und Hardware haben sich auseinander gelebt. Scheidung ist keine Option.

> Das ist nicht mehr gut gefertigte Software!

Wo ist unserer Stolz als [[http://manifesto.softwarecraftsmanship.org/#/de][Software Craftsmen]]?

# Stellen wir uns ein Haus mit 10 Zimmern vor. Unsere Software ist wie eine
# Elektroheizung mit der wir 1 Zimmer zur Zeit heizen können. Aber wir können
# nie alle Zimmer gleichzeitig heizen. Wir wollen aber eine Heizung bei der
# wir auch jederzeit anbauen können und mehr Zimmer heizen wenn das Gas reicht.

* Java to Go #4

Wie wäre es mit Node.js?
.image images/farewell_nodejs_50.png

Ja dann vielleicht [[https://golang.org/][Go]]?

* Die Sprache Go

* Der Gopher

.image images/gophercolor_small.png

* Fakten zu Go

- Statisches Typsystem
- Garbage Collection
- Ausführung als Binärdatei (ohne Virtuelle Maschine)
- Prozedurale Programmiersprache

* Ziele von Go

- Wartbarkeit
- Produktivität
- Performance

* Hello Gopher

.play code/01_hellogopher/hellogopher.go

Programm ausführen

  go build hellogopher.go // 1. Code kompilieren
  ./hellogopher           // 2. Binary ausführen

Alternativ

  go run hellogopher.go   // Code kompilieren und ausführen

* Go Quellcode ...

- ist UTF-8 kodiert
- ist immer gleich formatiert (mit `gofmt`)
- enthält nie ungenutzte Variablen (Compile Fehler)
- enthält nie ungenutzte Package Imports (Compile Fehler)
- wird dokumentiert mit `godoc`

* Go Entwicklung

*Fertige*IDEs*
- Plugins für Eclipse und Intellij
- Jetbrains arbeitet an IDE [[https://www.jetbrains.com/go/][Gogland]]

*Pimp*my*Texteditor*
Alle Tools zur Go Entwicklung sind ganz nach Unix Philosophie klein und eigenständig.
Dazu noch [[http://vim.spf13.com/][vim]], emacs oder [[https://atom.io/][Atom]] und fertig ist die IDE.

* Funktionen

- Schlüsselwort `func`
- Parameter mit Datentypen
- beliebig viele Rückgabewerte mit Datentypen

.play code/03_function_param/hellogopher.go /START/,/END/

* Variablen und Konstanten

- Variablen sind typisiert
- Typ muss nicht zwingend angegeben werden

  var s string // Deklaration
  s = "Gopher" // Zuweisung

  s := "Gopher" // Deklaration + Zuweisung in einem

Konstanten mit dem Schlüsselwort `const`

  const x string = "VAL"

* Sichtbarkeit

Go kennt zwei Sichtbarkeiten:

*Privat*
Nur innerhalb des Packages sichtbar.

*Exportiert*
Auch außerhalb des Packages sichtbar.

Variablen und Funktionen die mit einem Großbuchstaben beginnen sind exportiert,
sonst privat.

  func berechnePraemie {} // Privat
  func BerechnePraemie {} // Exportiert

* Arrays und Slices

*Arrays*

- feste Größe

  var a [2]string
  a[0] = "Hello"
  a[1] = "Gopher"
  fmt.Println(a[0] + " " + a[1])

*Slices*

- variable Größe
- ähnlich einer Liste in Java

  names := make([]string, 2)
  names := []string{"Hans", "Franz"}

* Kontrollstrukturen
Es gibt `for`, `if`, `switch` und `select` in verschiedenen Varianten.

.code code/controls-structures.go

* Structs

- Datencontainer ohne Logik
- keine Vererbung nur Schachtelung
- Funktionen mit Struct als Receiver können auf dem Struct aufgerufen werden

.play code/04_structs/hellogopher.go /START/,/END

* Pointer
- Go übergibt immer eine Kopie falls nicht anders angegeben
- Pointer sind Referenzen auf Variablen

.play code/04_pointer/hellogopher.go /START/,/END/

* Interfaces
- enthalten Methodensignaturen
- werden implizit implementiert
- implementiert ein Typ alle Methoden des Interfaces, so implementiert er das Interface

* Interface #Beispiel
.play code/05_interface/hellogopher.go /START/,/END/

* Fehler
- Go kennt kein spezielles Konstrukt zur Fehlerbehandlung
- Fehler sind normale Rückgabewerte

- Fehler behandeln
    result, error := dangerousFunction()
    if error != nil {
      // Fehler behandeln
    }

- Fehler erzeugen

    return nil, errors.New("Ouch!")

- `panic` nur wenn alles zu spät ist

* Nebenläufigkeit

* Paralellisierung vs. Nebenläufigkeit

Parallelism is simply running things in parallel.

Concurrency is a way to structure your program.

# Concurrency is not parallelism, although it enables parallelism.

.caption Rob Pike

* Nebenläufigkeit in Go

*Goroutinen*
- leichtgewichtiger Thread
- innerhalb einer Goroutine läuft Code sequentiell ab

*Channels*
- Nachrichtenkanäle über die Goroutinen Nachrichten austauschen

Theorie dahinter: [[https://en.wikipedia.org/wiki/Communicating_sequential_processes][Communicating Sequential Processes]]

* Grundprinzip

Don't communicate by sharing memory,
share memory by communicating.
.caption Rob Pike

* Goroutine

* Goroutine #Erstes Beispiel

- Schlüsselwort `go` startet eine Goroutine
- verhält sich wie `&` bei Shell Kommando

.play code/06_goroutine_simple/hellogopher.go /START/,/END/

Aber warum sehen wir keine Ausgabe?
- `main` Funktion wird in einer Goroutine ausgeführt
- Programm endet wenn die `main` Goroutine endet

* Goroutine #Panic
- Ausgabe aller Goroutinen mit `panic`

.play code/07_goroutine_panic/hellogopher.go /START/,/END/

* Goroutine #WaitGroup

- mit `WaitGroup` auf Ende aller Goroutine warten

.play code/08_goroutine_waitgroup/hellogopher.go /START/,/END/

* Channel

* Channel

- Kanal für Nachrichten
- Kommunikation in eine oder beide Richtungen
- Puffer für Nachrichten
- first-class Value

.code code/09_channel_simple/helpers.go /START1/,/STOP1/
.code code/09_channel_simple/helpers.go /START2/,/STOP2/
.code code/09_channel_simple/helpers.go /START3/,/STOP3/

* Channels und Synchronisation

- Senden einer Nachricht mit blockiert die Goroutine bis der Empfänger bereit ist.
  c <- "Jim" // Nachricht an Channel c senden

- Empfangen einer Nachricht mit blockiert die Goroutine bis eine Nachricht kommt.
  name := <-c // Nachricht von Channel c empfangen

Goroutinen kommunizieren und synchronisieren über Channels.

* Channel #Erstes Beispiel

.play code/09_channel_simple/hellogopher.go /START/,/END/

- Channel erlaubt Kommunikation in beide Richtungen
- Puffer Größe ist nicht angegeben also mit 1 vorbelegt
- Senden blockiert bis Platz im Puffer frei ist
- Empfangen blockiert bis Nachricht kommt

* Channel #Deadlock

Was passiert beim Senden einer Nachricht wenn kein Empfänger da ist?

.play code/10_channel_deadlock/hellogopher.go /START/,/END/

* Channel mit Select

- `select` Statement ist wie ein `switch` für Channels
- blockiert bis eine Nachricht auf einem Channel kommt

.play code/11_channel_select/hellogopher.go /START/,/END/

* Channel #Non-Blocking Select

- `default` Case tritt ein wenn auf keinem der Channels eine Nachricht kommt

.play code/12_channel_non_blocking_select/hellogopher.go /START/,/END/

* Channel mit Timeout

Wie können wir maximal 1 Sekunde mit der Begrüßung warten?

.play code/13_channel_select_timeout/hellogopher.go /START/,/END/

* Ping Pong
Tischtennis mit Goroutinen. Wir brauchen 1 Ball, 1 Tisch und 2 Spieler. Für
jeden Spieler starten wir eine eigene Goroutine.

  ball := 0                // Ball
  table := make(chan int)  // Tisch

  go player("Jack", table) // Spieler 1
  go player("Tom", table)  // Spieler 2

* Ping Pong #Code

.play code/14_ping_pong/pingpong.go /START/,/END/

* Einfache Concurrency Patterns

* Worker oder Fan Out
- Jobs sollen auf mehrere Worker verteilt werden
- Worker arbeiten die Jobs parallel ab

* Worker oder Fan Out # 2 Worker

.play code/15_2workers/workers.go /START/,/END/

* Worker oder Fan Out # 3 Worker

.play code/15_3workers/workers.go /START/,/END/

* Fan In
- mehrere Producer erzeugen Daten
- ein Empfänger führt die Daten zusammen

.image images/gophermegaphones.jpg

* Fan In #Code

.play code/16_fan_in/fanin.go /START/,/END/

* Netzwerk Programmierung

* Echo Server

.play code/17_echo/echo-no-concurrency.go

* Concurrent Echo Server

.play code/17_echo/echo.go

* Echo Server mit async Logging #Vorbereitung

.play code/18_echo_log/echo.go /START 1/,/END 1/

* Echo Server mit async Logging #main Methode

.play code/18_echo_log/echo.go /START 2/,/END 2/

* Web Server

.play code/19_httpserver/server.go

Test:
[[http://localhost:5050/parallelcon][http://localhost:5050/parallelcon]]

* Zusammenfassung

- Überflug über die Programmiersprache Go
- Goroutinen und Channels als Mittel Nebenläufigkeit abzubilden

*Fazit*
- jeder Code sollte die Nebenläufigkeit der Domäne abbilden
- Go Code ist langweilig und stolz darauf
- Einfacheit und Minimalismus überzeugen mich. Euch auch?

* Fragen

.background https://raw.githubusercontent.com/remast/talks/master/2017-03_parallel_Go-Parallel/images/gopherbw.png

* Links

- [[https://tour.golang.org][Tour of Go]]
- [[https://github.com/red6/java-to-go][Java to Go]], Jan Stamer im Javamagazin 04/2017
- [[https://talks.golang.org/2012/concurrency.slide][Go Concurrency Patterns]], Rob Pike
- [[http://golang.org/s/concurrency-is-not-parallelism][Concurrency is not Parallelism]], Rob Pike
- [[https://en.wikipedia.org/wiki/Communicating_sequential_processes][Communicating Sequential Processes]], Wikipedia
