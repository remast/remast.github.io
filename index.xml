<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Go for the REST on >_ Jan Stamer</title><link>https://remast.github.io/</link><description>Recent content in Go for the REST on >_ Jan Stamer</description><generator>Hugo -- gohugo.io</generator><language>de-de</language><lastBuildDate>Sun, 01 Sep 2019 23:11:13 +0000</lastBuildDate><atom:link href="https://remast.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>Local Dev Setup with automatic HTTPS + WebSockets in 1 Line</title><link>https://remast.github.io/posts/2021-02_local-dev-server-with-caddy/</link><pubDate>Tue, 02 Feb 2021 16:11:13 +0000</pubDate><guid>https://remast.github.io/posts/2021-02_local-dev-server-with-caddy/</guid><description>Let&amp;rsquo;s set up a local web server for development that supports automatic HTTPs and WebSockets in just 1 line of code. No problem thanks to the awesome Caddyserver.
Preparations Set up the local hostname For automatic HTTPs you need to set up a local hostname first. We will use remast.local. To make your local development machine available at that hostname you need to add the hostname to your local hosts file.</description></item><item><title>Using SonarCloud with Github Actions and Maven</title><link>https://remast.github.io/posts/2020-03_sonarcloud_with_githubaction_and_maven/</link><pubDate>Sun, 01 Mar 2020 23:11:13 +0000</pubDate><guid>https://remast.github.io/posts/2020-03_sonarcloud_with_githubaction_and_maven/</guid><description>In this post you will will learn how to analyse your Java Maven project with SonarCloud using Github Actions.
Starting point is a simple Java project with a Maven build. First we&amp;rsquo;ll use SonarCloud to analyze our source code from our local dev environment. Then we&amp;rsquo;ll use Github Actions to run the Maven build. So finally we have a fully functional ci pipeline which builds and analyzes our code using Github Actions.</description></item><item><title>Go for SonarCloud with Github Actions</title><link>https://remast.github.io/posts/2019-11_go-for-sonarcloud-with-github-actions/</link><pubDate>Fri, 01 Nov 2019 23:11:13 +0000</pubDate><guid>https://remast.github.io/posts/2019-11_go-for-sonarcloud-with-github-actions/</guid><description>Learn the basics of analyzing a Go project with SonarQube in my post Go for SonarQube. In this post I&amp;rsquo;ll show you how to use Github Actions to analyze your Go project with SonarCloud. SonarCloud offers SonarQube as a service.
{% link remast/go-for-sonarqube-4iho %}
Metrics like lines of code or test coverage are great to track and improve the quality of your source code. SonarQube can calculate these metrics for your project and track how they evolve over time.</description></item><item><title>The Coders Bucket List</title><link>https://remast.github.io/posts/2019-10_the-coders-bucket-list/</link><pubDate>Tue, 01 Oct 2019 23:11:13 +0000</pubDate><guid>https://remast.github.io/posts/2019-10_the-coders-bucket-list/</guid><description>A bucket list is a list of things you ought to do before you kick the bucket and die. Here&amp;rsquo;s a bucket list for every coder out there. Check it out and tackle them one at a time!
Compile your own Linux Kernel The linux kernel is the heart of the Linux operating system and is open source. Compile your own linux kernel to get a deeper understanding of how linux, open source software and the kernel itself work.</description></item><item><title>Go for the REST</title><link>https://remast.github.io/posts/2019-09_go-for-the-rest/</link><pubDate>Sun, 01 Sep 2019 23:11:13 +0000</pubDate><guid>https://remast.github.io/posts/2019-09_go-for-the-rest/</guid><description>The Go programming language is a great fit for RESTful web applications. Picking the right Go web framework to start with is not an easy task. Lucky enough it is a task solved already. Pick the Go web framework buffalo and off you go. Not convinced yet? Learn how to build a RESTful web application with buffalo.
Buffalo is a whole ecosystem to develop web applications in Go. Buffalo combines routing, templating and testing to build web applications based on the famous model-view-controller pattern.</description></item><item><title>My Top Software Architecture Books and Resources</title><link>https://remast.github.io/posts/2019-08_my-top-software-architecture-resources/</link><pubDate>Thu, 01 Aug 2019 23:11:13 +0000</pubDate><guid>https://remast.github.io/posts/2019-08_my-top-software-architecture-resources/</guid><description>Here are my top books and resources on software architecture. All of these are really great sources of knowledge for anyone who&amp;rsquo;s dealing with software architecture. And that should be anyone who develops software. Since software architecture is a team responsibility and should be a team effort.
Software Architecture for Developers &amp;ldquo;Software Architecture for Developers&amp;rdquo; by Simon Brown is a great introduction for agile software architecture.
Volume 1 is a guide to lightweight software architecture and technical leadership</description></item><item><title>Soft Coder / 3x3 des Daily Standup</title><link>https://remast.github.io/posts/2019-08_softcoder-001-dailystandup/</link><pubDate>Thu, 01 Aug 2019 23:11:13 +0000</pubDate><guid>https://remast.github.io/posts/2019-08_softcoder-001-dailystandup/</guid><description>Egal ob Kanban oder Scrum, täglich grüßt das Daily Standup. Das Team hat 15 Minuten, um die wichtigsten Informationen von gestern und heute auszutauschen. Du hast 30 Sekunden. Nutze sie.
Das folgende 3x3 des Daily Standup hilft Dir dabei. Mit 9 Tipps zum wichtigsten Meeting der agilen Entwicklung.
Bereite Dich vor Vorbereitung ist alles, auch beim Daily Standup. Also bereite Dich vor. Diese 3 Dinge helfen Dir dabei:
#1 Komme pünktlich Komme pünktlich.</description></item><item><title>Wir schreiben Code</title><link>https://remast.github.io/posts/2017-09_wir-schreiben-code/</link><pubDate>Fri, 01 Sep 2017 23:11:13 +0000</pubDate><guid>https://remast.github.io/posts/2017-09_wir-schreiben-code/</guid><description>Wir Software Entwickler lesen und schreiben viel. Aber unser Genre ist nicht Belletristik und nicht Liebesromane. Wir lesen Code. In vielen Sprachen. Wir lesen und schreiben XML, SQL, Java oder JavaScript. Der eine bevorzugt Java, die andere PHP. Wenn wir schreiben sind wir genau und präzise, das müssen wir. Jedes Wort ist wichtig. Auch einzelne Zeichen können entscheiden über Gewinn oder Verlust, manchmal auch über Tod oder Leben. Deswegen müssen wir genau sein, genau schreiben ohne Missverständnisse oder Kompromisse zuzulassen.</description></item><item><title>Go for SonarQube</title><link>https://remast.github.io/posts/2019-02_go-for-sonarqube/</link><pubDate>Wed, 01 Feb 2017 23:11:13 +0000</pubDate><guid>https://remast.github.io/posts/2019-02_go-for-sonarqube/</guid><description>Static code analysis is a great and easy way to discover bugs, race conditions, code smells or to check whether code matches the coding conventions. I will motivate why it’s useful to use SonarQube for static analysis of Go code and show you how it’s done.
Go Vet Go already ships with the tool vet which does static code analysis of Go code. To use vet just run go vet source/directory/*.</description></item></channel></rss>